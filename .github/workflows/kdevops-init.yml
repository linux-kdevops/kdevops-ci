# SPDX-License-Identifier: GPL-2.0
#
# This can be used as a initialization workflow for most Linux kernel
# development environments. This takes care of:
#
#   - Checks out and re-using a local mirror for your kernel tree
#   - Looks for a defconfig in kdevops to use for your kernel tree
#   - Sets up CI metadata for kdevops-results-archive
#   - Ensures your kernel tree at least builds with defconfig
#   - Brings up target DUTs nodes
#   - Installs your Linux kernel tree on them
#   - Builds all of your test requirements for your Linux kernel tree

name: Base kdevops workflow

on:
  workflow_call:  # Makes this workflow reusable
    inputs:
      kdevops_defconfig:
        required: false
        type: string
      kernel_tree:
        required: false
        type: string
        default: "linux"
      kernel_ref:
        required: false
        type: string
        default: "master"

jobs:
  setup:
    name: Setup kdevops environment
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Configure git
        run: |
          git config --global --add safe.directory '*'
          git config --global user.name "kdevops"
          git config --global user.email "kdevops@lists.linux.dev"

      - name: Checkout kdevops
        run: |
          rm -rf kdevops
          git clone --branch ci-repo https://github.com/dkruces/kdevops kdevops

      - name: Checkout custom branch with delta on kdevops/linux
        run: |
          LINUX_TREE="/mirror/${{ inputs.kernel_tree || 'linux' }}.git"
          LINUX_TREE_REF="${{ inputs.kernel_ref || 'master' }}"
          cd kdevops
          git clone $LINUX_TREE linux
          cd linux
          git checkout $LINUX_TREE_REF
          git log -1

      - name: Make sure our repo kdevops defconfig exists
        run: |
          cd kdevops
          if [[ -z "${{ inputs.kdevops_defconfig }}" ]]; then
            KDEVOPS_DEFCONFIG=${{ github.ref_name }}
          else
            KDEVOPS_DEFCONFIG="${{ inputs.kdevops_defconfig }}"
          fi

          if [[ ! -f defconfigs/$KDEVOPS_DEFCONFIG ]]; then
            echo "kdevops lacks a defconfig for this repository, expected to find: defconfigs/$KDEVOPS_DEFCONFIG"
            exit 1
          fi

          echo "KDEVOPS_DEFCONFIG=$KDEVOPS_DEFCONFIG" >> $GITHUB_ENV

      - name: Initialize CI metadata for kdevops-results-archive for linux
        run: |
          set -euxo pipefail
          cd kdevops/linux
          echo "${{ inputs.kernel_tree || 'linux' }}" > ../ci.trigger
          echo "testing" > ../ci.subject
          echo "${{ inputs.kernel_ref || 'master' }}" > ../ci.ref

          RELEVANT_GIT_TAG=$(cat ../ci.ref)
          RELEVANT_GIT_REF=$(git rev-parse --short=12 $RELEVANT_GIT_TAG)

          echo "LINUX_GIT_REF=$RELEVANT_GIT_REF" >> $GITHUB_ENV
          echo "LINUX_GIT_TAG=$RELEVANT_GIT_TAG" >> $GITHUB_ENV

          # Start out pessimistic
          echo "unknown" > ../ci.result
          echo "Nothing to write home about." > ../ci.commit_extra

      - name: Run a quick Linux kernel defconfig build test
        run: |
          cd kdevops/linux
          git reset --hard ${{ env.LINUX_GIT_TAG }}
          make defconfig
          make -j$(nproc)

      - name: Run kdevops make defconfig-repo
        run: |
          LINUX_TREE="/mirror/${{ inputs.kernel_tree || 'linux' }}.git"
          LINUX_TREE_REF="${{ env.LINUX_GIT_TAG }}"

          # We make the compromise here to use a relevant git tag for the
          # host prefix so that folks can easily tell what exact kernel tree
          # is being tested by using the relevant git ref. That is, if you
          # pushed a tree with the .github/ directory as the top of the tree,
          # that commit will not be used, we'll use the last one as that is
          # the relevant git ref we want to annotate a test for.
          #
          # The compromise here is that we expect no two same identical tests
          # on the same self-hosted server. We could extend this with something
          # like github.run_id but its not yet clear if we can have kdevops
          # hosts with a bundled prefix ID like that ref-runid-testname. Tests
          # have been done with the full lenght sha1sum though and we know that
          # does work.
          KDEVOPS_HOSTS_PREFIX="${{ env.LINUX_GIT_REF }}"

          echo "Going to use defconfig-${{ env.KDEVOPS_DEFCONFIG }}"

          echo "Linux tree:          $LINUX_TREE"
          echo "Linux trigger ref:   $LINUX_TREE_REF"
          echo "Linux tag:           ${{ env.LINUX_GIT_TAG }}"
          echo "Runner ID:           ${{ github.run_id }}"
          echo "kdevops host prefix: $KDEVOPS_HOSTS_PREFIX"
          echo "kdevops defconfig:   defconfig-${{ env.KDEVOPS_DEFCONFIG }}"

          KDEVOPS_ARGS="\
          KDEVOPS_HOSTS_PREFIX=$KDEVOPS_HOSTS_PREFIX \
          LINUX_TREE=$LINUX_TREE \
          LINUX_TREE_REF=$LINUX_TREE_REF \
          ANSIBLE_CFG_CALLBACK_PLUGIN="debug" \
          defconfig-${{ env.KDEVOPS_DEFCONFIG }}"
          echo "Going to run:"
          echo "make $KDEVOPS_ARGS"

          cd kdevops
          make $KDEVOPS_ARGS

      - name: Run kdevops make
        run: |
          cd kdevops
          make -j$(nproc)

      - name: Run kdevops make bringup
        run: |
          cd kdevops
          ls -ld linux
          make destroy
          make bringup

      - name: Build linux and boot test nodes on test kernel
        run: |
          cd kdevops
          make linux

      - name: Build required ci tests
        run: |
          cd kdevops
          CI_REPO="${{ github.repository }}" make ci-build-test
